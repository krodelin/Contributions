| package |
package := Package name: 'US LevenshteinDistance'.
package paxVersion: 1;
	basicComment: 'Calculate the Levenshtein Distance of  two SequencableCollections

Usage
	See Testcases

See here for more information:
http://www.merriampark.com/ld.htm#
http://www-igm.univ-mlv.fr/~lecroq/seqcomp/node2.html
http://en.wikipedia.org/wiki/Levenshtein_distance
	'.

package basicPackageVersion: '1.006'.


package methodNames
	add: #Number -> #min:min:;
	add: #SequenceableCollection -> #levenshteinDistance:;
	yourself.

package binaryGlobalNames: (Set new
	yourself).

package globalAliases: (Set new
	yourself).

package setPrerequisites: (IdentitySet new
	add: '..\..\..\Core\Object Arts\Dolphin\Base\Dolphin';
	yourself).

package!

"Class Definitions"!


"Global Aliases"!


"Loose Methods"!

!Number methodsFor!

min: a min: b 
	| min |
	min := self.
	a < min ifTrue: [min := a].
	b < min ifTrue: [min := b].
	^min! !
!Number categoriesFor: #min:min:!public! !

!SequenceableCollection methodsFor!

levenshteinDistance: aSequenceableCollection 
	| matrix colChar rowChar cost stream |
	self isEmpty ifTrue: [^aSequenceableCollection  size].
	aSequenceableCollection  isEmpty ifTrue: [^self size].
	matrix := Dictionary new.
	0 to: self size do: [:col | 0 to: aSequenceableCollection  size do: [:row | matrix at: col @ row put: 0]].
	0 to: self size do: [:col | matrix at: col @ 0 put: col].
	0 to: aSequenceableCollection  size do: [:row | matrix at: 0 @ row put: row].
	1 to: self size
		do: 
			[:col | 
			colChar := self at: col.
			1 to: aSequenceableCollection  size
				do: 
					[:row | 
					rowChar := aSequenceableCollection  at: row.
					colChar = rowChar ifTrue: [cost := 0] ifFalse: [cost := 1].
					matrix at: col @ row
						put: ((matrix at: (col - 1) @ row) + 1 min: (matrix at: col @ (row - 1)) + 1
								min: (matrix at: (col - 1) @ (row - 1)) + cost)]].
	^matrix at: self size @ aSequenceableCollection  size! !
!SequenceableCollection categoriesFor: #levenshteinDistance:!public! !

"End of package definition"!

