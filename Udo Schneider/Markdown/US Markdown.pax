| package |
package := Package name: 'US Markdown'.
package paxVersion: 1;
	basicComment: '# $id: US Markdown 0.012$
$for: Dolphin Smalltalk 7$ by $developer: udos@udos-laptop$ <Udo.Schneider@homeaddress.de>

## Description
This package provides Markdown->HTML converion. It uses [marked](https://github.com/chjj/marked), a JavaScript library, using `IScript` control to do the work.

## Usage

### MarkdownToHtmlConverter

`MarkdownToHtmlConverter` is a `TypeConverter` subclass which translates a markdown string to the coresponding HTML output (using `#leftToRight:`). The output is just the body part (w/o the `<body>` tag!!).

#### Examples

**Command:**

    converter := MarkdownToHtmlConverter new.
    converter leftToRight: ''*Hello World*''. "Display-it"

**Result:**

    ''<p><em>Hello World</em></p>''

You can also specify a caret position. This will create a named anchor and some JS to move the generated html document viewport to the line *before* the caret. The caret position is expressed in the context of the source markdown string.

**Command:**

    converter := MarkdownToHtmlConverter new.
    converter caretPosition: 11.
    converter leftToRight: ''Line 1
    
    Line 2''. "Display-it"

**Result:**

    ''<p>Line 1</p>
    <p><span id="cursor"></span>
    Line 2</p>''

### MarkdownToHtmlCssConverter

`MarkdownToHtmlCssConverter` inherits all features of `MarkdownToHtmlConverter` but does generate complete documents (wrapped in `<html>` tags) incl. CSS if provided.

### Examples

**Command:**

    converter := MarkdownToHtmlCssConverter new.
    converter caretPosition: 11.
    converter leftToRight: ''Line 1
    
    Line 2''. "Display-it"

**Result:**

    ''<html>
    <head><style>
    html, body {
      color: black; }
    /* A whole lot more CSS */
    </style></head>
    <body><div id="wrapper"><p>Line 1</p>
    <p><span id="cursor"></span>
    Line 2</p>
    </div>
    </body>''

If you want to use your own CSS you can either

* Add a class method to `MarkdownToHtmlCssConverter`. Every method ending on `Css` is expected to return a CSS String. Just set the `#style` aspect to the appropriate selector. All instances also prepopulate the `#style` aspect with all available class-side CSS selectors for comfortable choice.
* Set the `#style` aspect to `#custom` and provide your custom CSS String to aspect `#customString`.

## The MIT License (MIT)

Copyright © `2016` `Udo Schneider`

Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the “Software”), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
'.

package basicPackageVersion: '0.012'.


package classNames
	add: #MarkdownToHtmlConverter;
	add: #MarkdownToHtmlCssConverter;
	yourself.

package binaryGlobalNames: (Set new
	yourself).

package globalAliases: (Set new
	yourself).

package setPrerequisites: (IdentitySet new
	add: '..\..\..\Projects\Core\Object Arts\Dolphin\ActiveX\Components\Scripting\ActiveX Scripting';
	add: '..\..\..\Projects\Core\Object Arts\Dolphin\IDE\Base\Development System';
	add: '..\..\..\Projects\Core\Object Arts\Dolphin\Base\Dolphin';
	add: '..\..\..\Projects\Core\Object Arts\Dolphin\MVP\Type Converters\Dolphin Type Converters';
	yourself).

package!

"Class Definitions"!

TypeConverter subclass: #MarkdownToHtmlConverter
	instanceVariableNames: 'converterControl caretPosition'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
MarkdownToHtmlConverter subclass: #MarkdownToHtmlCssConverter
	instanceVariableNames: 'style customStyle'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

"Global Aliases"!


"Loose Methods"!

"End of package definition"!

